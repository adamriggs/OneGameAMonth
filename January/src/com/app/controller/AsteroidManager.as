// com.adam.utils.AsteroidManager// Adam Riggs//package com.app.controller{	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.model.Model;	import com.app.view.Asteroid;		import flash.display.Stage;	import flash.events.*;
		public class AsteroidManager{				//vars		protected var _asteroidCount:uint;		protected var _asteroidAngle:Number;		protected var _asteroidVelocity:Number;		protected var _asteroids:Vector.<Asteroid>;				//objects		private var utils:Utils=Utils.instance;		protected var model:Model=Model.instance;		protected var _stage:Stage;				//const		public const NAME:String="asteroidManager";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:AsteroidManager = new AsteroidManager(AsteroidManagerLock);				public function AsteroidManager(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != AsteroidManagerLock)			{				throw new Error("Invalid AsteroidManager access.  Use AsteroidManager.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{			_asteroidCount=model.asteroidCount;			_asteroidVelocity=model.asteroidVelocity;			_asteroidAngle=model.asteroidAngle;		}				private function initEvents():void{			utils.em.listen(NAME, onAsteroidManager);		}				private function initObjs():void{			_asteroids=new Vector.<Asteroid>;		}		//*****Core Functionality				public function populate():void{			_asteroids=new Vector.<Asteroid>;			for(var i:uint=0;i<_asteroidCount;i++){				_asteroids.push(new Asteroid());				_asteroids[i].x=Math.random()*model.asteroidBeltWidth;				if(Math.random()>.5){_asteroids[i].x+=(model.stageWidth-model.asteroidBeltWidth);}				_asteroids[i].y=Math.random()*model.stageHeight;				_stage.addChildAt(_asteroids[i],0);			}						setAsteroidVariables();		}				public function setAsteroidVariables():void{			for(var i:uint=0;i<_asteroids.length;i++){				_asteroids[i].velocity=_asteroidVelocity;				_asteroids[i].angle=_asteroidAngle;				_asteroids[i].calcSpeed();			}		}		//*****Event Handlers				private function onAsteroidManager(e:MuleEvent):void{			/*debug("onAsteroidManager()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){												default:					debug("onAsteroidManager()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():AsteroidManager{return _instance;}				public function get asteroids():Vector.<Asteroid>{return _asteroids;}				public function set stage(value:Stage):void{_stage=value;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end packageclass AsteroidManagerLock{}
// com.app.view.View3D// Adam Riggs//package com.app.view {		import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Bitmap;	import flash.display.Sprite;	import flash.display3D.Context3D;	import flash.display3D.Context3DRenderMode;	import flash.events.*;	import flash.utils.getTimer;
		public class View3D extends Sprite{				//vars				//objects		protected var appData:AppData=AppData.instance;		protected var _context3D:Context3D;				protected var _spriteSheet:SpriteSheet;		protected var _sprite3DBatch:Sprite3DBatch;		protected var _entityManager:EntityManager;				[Embed(source="mario.png")]		protected const TextureBitmap:Class;		protected var _textureBitmap:Bitmap;				//const		public const NAME:String="view3D";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:View3D = new View3D(View3DLock);				public function View3D(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != View3DLock)			{				throw new Error("Invalid View3D access.  Use View3D.instance instead.");			} else {				//init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();						if(stage){				debug("stage");				addEventListener(Event.CONTEXT3D_CREATE, onContext3D, false, 0, true);			} else {				debug("!stage");				addEventListener(Event.ADDED_TO_STAGE, onAddedToStage,false,0,true);			}		}				protected function initVars():void{						//bitmap			_textureBitmap=new TextureBitmap();		}				protected function initEvents():void{			appData.eventManager.listen(NAME, onView3D);			addEventListener(Event.ENTER_FRAME, onEnterFrame, false, 0, true);		}				protected function initObjs():void{								}				protected function init3D():void{			debug("init3D()");						_context3D=stage.stage3Ds[0].context3D;			configureBackBuffer();						_spriteSheet=new SpriteSheet(_textureBitmap.bitmapData, 8, 8, _context3D);			_sprite3DBatch=new Sprite3DBatch(_spriteSheet,_context3D);			_entityManager=new EntityManager(_sprite3DBatch,_context3D);					}						//*****Core Functionality				protected function configureBackBuffer(width:int=800,height:int=600):void{			_context3D.configureBackBuffer(width,height,0,false);		}		//*****Event Handlers				protected function onEnterFrame(e:Event):void{			//debug("onEnterFrame()");			if(!_context3D){				return;			}						_entityManager.update();			_context3D.present();					}				protected function onAddedToStage(e:Event):void{			debug("onAddedToStage()");			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			stage.stage3Ds[0].addEventListener(Event.CONTEXT3D_CREATE, onContext3D, false, 0, true);			stage.stage3Ds[0].requestContext3D(Context3DRenderMode.AUTO);		}				protected function onContext3D(e:Event):void{			debug("onContext3D()");			stage.stage3Ds[0].removeEventListener(Event.CONTEXT3D_CREATE, onContext3D);			debug("stage.stage3Ds[0].context3D.driverInfo=="+stage.stage3Ds[0].context3D.driverInfo);			init3D();		}				protected function onView3D(e:MuleEvent):void{			/*debug("onView3D()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								default:					debug("onView3D()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);					break;							}		}				//*****Gets and Sets				public static function get instance():View3D{return _instance;}		//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		protected function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass View3DLock{}
// com.app.controller.KeyboardController// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Sprite;	import flash.events.*;		import org.casalib.ui.Key;
		public class KeyboardController extends Sprite{				//vars		protected var _playerOne:String;				//objects		private var appData:AppData=AppData.instance;				//const		public const NAME:String="keyboardController";		public const RETURNTYPE:String=NAME;				public static const CONTROL:String="control"				/** Storage for the singleton instance. */		private static const _instance:KeyboardController = new KeyboardController(KeyboardControllerLock);				public function KeyboardController(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != KeyboardControllerLock)			{				throw new Error("Invalid KeyboardController access.  Use KeyboardController.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{			_playerOne="sprite3D";		}				private function initEvents():void{			appData.eventManager.listen(NAME, onKeyboardController);			if(!stage){				addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			} else {				initKeyboard();			}		}				private function initObjs():void{					}				private function initKeyboard():void{			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);		}		//*****Core Functionality				private function startUp():void{			//debug("startUp()");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"startUp"});		}				private function startDown():void{			//debug("startDown()");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"startDown"});		}				private function startLeft():void{			//debug("startLeft()");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"startLeft"});		}				private function startRight():void{			//debug("startRight()");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"startRight"});		}				private function stopUp():void{			//debug("stopUp");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"stopUp"});		}				private function stopDown():void{			//debug("stopDown()");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"stopDown"});		}				private function stopLeft():void{			//debug("stopLeft()");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"stopLeft"});		}				private function stopRight():void{			//debug("stopRight()");			appData.eventManager.dispatch(_playerOne, {sender:NAME, type:CONTROL, message:"stopRight"});		}		//*****Event Handlers				private function onKeyDown(e:KeyboardEvent):void{			//debug("key down: "+e.keyCode.toString());						switch(e.keyCode){								//arrow keys				case 38:	//up arrow					startUp();					break;								case 40:	//down arrow					startDown();					break;								case 37:	//left arrow					startLeft();					break;								case 39:	//right arrow					startRight();					break;								//wasd				case 87:	//w					startUp();					break;								case 83:	//s					startDown();					break;									case 65:	//a					startLeft();					break;								case 68:	//d					startRight();					break;							}					}				private function onKeyUp(e:KeyboardEvent):void{			//debug("key up: "+e.keyCode.toString());						switch(e.keyCode){								//arrow keys				case 38:	//up arrow					stopUp();					break;								case 40:	//down arrow					stopDown();					break;								case 37:	//left arrow					stopLeft();					break;								case 39:	//right arrow					stopRight();					break;								//wasd				case 87:	//w					stopUp();					break;								case 83:	//s					stopDown();					break;									case 65:	//a					stopLeft();					break;								case 68:	//d					stopRight();					break;							}		}				private function onAddedToStage(e:Event):void{			initKeyboard();		}				private function onKeyboardController(e:MuleEvent):void{			/*debug("onKeyboardController()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){												default:					debug("onKeyboardController()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():KeyboardController{return _instance;}				public function get playerOne():String{return _playerOne;}		public function set playerOne(value:String):void{_playerOne=value}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass KeyboardControllerLock{}
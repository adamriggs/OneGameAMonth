// com.adam.utils.SpriteSheet// Adam Riggs//package com.app.view{	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;	import com.greensock.TweenLite;		import flash.display.BitmapData;	import flash.display3D.Context3D;	import flash.display3D.Context3DTextureFormat;	import flash.display3D.textures.Texture;	import flash.events.*;	import flash.geom.Matrix;	import flash.geom.Rectangle;
		public class SpriteSheet {				//vars		protected var _numSpritesW:uint;		protected var _numSpritesH:uint;		protected var _texStart:uint;		protected var _texCount:uint;		protected var _texSize:uint;		protected var _texVectors:Vector.<Vector.<uint>>;				//objects		protected var appData:AppData=AppData.instance;		protected var _spriteSheet:BitmapData;		protected var _uvCoords:Vector.<Number>;		protected var _context3D:Context3D;		protected var _texture:Texture;		protected var _animationHash:Vector.<uint>;		protected var _animationVertices:Vector.<Number>;				//const		public const NAME:String="spriteSheet";		public const RETURNTYPE:String=NAME;				public function SpriteSheet(spriteSheet:BitmapData, numSpritesW:uint, numSpritesH:uint, context:Context3D){			_numSpritesW=numSpritesW;			_numSpritesH=numSpritesH;			_spriteSheet=spriteSheet;			_context3D=context;			init();		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();			initAnimations();		}				private function initVars():void{			_texStart=0;			_texCount=4;			_texSize=2;		}				private function initEvents():void{			appData.eventManager.listen(NAME, onSpriteSheet);		}				private function initObjs():void{			_uvCoords=new Vector.<Number>;						for(var y:uint=0; y<_numSpritesH;y++){								for(var x:uint=0; x<_numSpritesW;x++){					_uvCoords.push(						x/_numSpritesW,(y+1)/_numSpritesH,						x/_numSpritesW,y/_numSpritesH,						(x+1)/_numSpritesW, y/_numSpritesH,						(x+1)/_numSpritesW, (y+1)/_numSpritesH);				}							}						_texture = _context3D.createTexture(_spriteSheet.width, _spriteSheet.height, Context3DTextureFormat.BGRA, false);			_texture.uploadFromBitmapData(_spriteSheet);						// generate mipmaps			var currentWidth:int = _spriteSheet.width >> 1;			var currentHeight:int = _spriteSheet.height >> 1;			var level:int = 1;			var canvas:BitmapData = new BitmapData(currentWidth, currentHeight, true, 0);			var transform:Matrix = new Matrix(.5, 0, 0, .5);			while ( currentWidth >= 1 || currentHeight >= 1 ) {				canvas.fillRect(new Rectangle(0, 0, Math.max(currentWidth,1), Math.max(currentHeight,1)), 0);				canvas.draw(_spriteSheet, transform, null, null, null, true);				_texture.uploadFromBitmapData(canvas, level++);				transform.scale(0.5, 0.5);				currentWidth = currentWidth >> 1;				currentHeight = currentHeight >> 1;			}		}				private function initAnimations():void{			_animationHash=new Vector.<uint>;			_animationVertices=new Vector.<Number>;						//standing with cape flapping			addAnimation(Vector.<uint>([0,1,2]));						//running with cape flapping			addAnimation(Vector.<uint>([8,9,10,11,12]));						//running with cape flapping and arms out			addAnimation(Vector.<uint>([18,19,20,21]));					}		//*****Core Functionality				protected function addAnimation(anim:Vector.<uint>):void{			_animationHash.push(_animationVertices.length);			_animationHash.push((anim.length)*_texSize*_texCount);						var i:uint=0;			var j:uint=0;			var tmpVector:Vector.<Number>;						for(i=0;i<anim.length;i++){				tmpVector=getSpriteUVs(anim[i]);				for(j=0;j<tmpVector.length;j++){					//debug("tmpVector["+j+"]=="+tmpVector[j]);					_animationVertices.push(tmpVector[j]);				}			}			//debug("_animationVertices.length=="+_animationVertices.length);		}				public function getRandomAnimation():Vector.<Number>{			var idx:uint=Math.floor(Math.random()*(_animationHash.length/2));			idx*=2;			//debug("idx=="+idx);			//debug("_animationHash.length=="+_animationHash.length);			//debug("Math.floor(Math.random()*_animationHash.length/2)=="+Math.floor(Math.random()*(_animationHash.length/2)));			//debug("_animationHash:");			//appData.listObject(_animationHash);			//idx=0;						//debug("_animationVertices.slice(idx,idx+_animationHash[idx+1]):");			//appData.listObject(_animationVertices.slice(_animationHash[idx],_animationHash[idx]+_animationHash[idx+1]));						return _animationVertices.slice(_animationHash[idx],_animationHash[idx]+_animationHash[idx+1]);		}				public function getSpriteUVs(id:uint):Vector.<Number>{			var idx:uint=id*8;			return _uvCoords.slice(idx,idx+8);		}		//*****Event Handlers				private function onSpriteSheet(e:MuleEvent):void{			/*debug("onSpriteSheet()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){																default:					debug("onSpriteSheet()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public function get texStart():uint{return _texStart;}		public function get texCount():uint{return _texCount;}		public function get texSize():uint{return _texSize;}		public function get texture():Texture{return _texture;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end package
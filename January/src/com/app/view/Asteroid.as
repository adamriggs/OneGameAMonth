// com.adam.utils.Asteroid// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.lib.AsteroidMC;	import com.app.model.Model;	import com.greensock.TweenLite;		import flash.display.Sprite;	import flash.events.*;
		public class Asteroid extends Sprite {				//vars		protected var _angle:Number;		protected var _velocity:Number;		protected var _speedX:Number;		protected var _speedY:Number;		protected var _active:Boolean;				//objects		private var utils:Utils=Utils.instance;		protected var model:Model=Model.instance;		private var asteroidMC:AsteroidMC;				//const		public const NAME:String="asteroid";		public const RETURNTYPE:String=NAME;				public function Asteroid(){						init();		}		//*****Initialization Routines				public function init():void{			//debug("init()");						initVars();			initEvents();			initObjs();			activate();		}				private function initVars():void{					}				private function initEvents():void{			utils.em.listen(NAME, onAsteroid);		}				private function initObjs():void{			asteroidMC=new AsteroidMC();			addChild(asteroidMC);		}		//*****Core Functionality				protected function setAngle(angle:Number):void{			_angle=Math.random()*angle;		}				protected function setVelocity(velocity:Number):void{			_velocity=Math.random()*velocity;			if(Math.random()>.5){				_velocity*=-1;			}		}				protected function activate():void{			_active=true;			visible=true;		}				protected function deactivate():void{			_active=false;			visible=false;		}				public function calcSpeed():void{			_speedY=-_velocity*Math.cos(utils.degToRad(_angle));			_speedX=_velocity*Math.sin(utils.degToRad(_angle));		}				public function move():void{			x+=_speedX;			y+=_speedY;						if(x<-(width/2)){				x=model.stageWidth+(width/2);			}						if(x>model.stageWidth+(width/2)){				x=-(width/2);			}						if(y<-(height/2)){				y=model.stageHeight+(height/2);			}						if(y>model.stageHeight+(height/2)){				y=-(height/2);			}		}				public function gotShot():void{			deactivate();		}		//*****Event Handlers				private function onAsteroid(e:MuleEvent):void{			/*debug("onAsteroid()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){																default:					debug("onAsteroid()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public function set angle(value:Number):void{setAngle(value);}		public function set velocity(value:Number):void{setVelocity(value);}				public function get speedX():Number{return _speedX;}		public function get speedY():Number{return _speedY;}		public function get active():Boolean{return _active;}		//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end package